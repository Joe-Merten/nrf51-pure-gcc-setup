TOOLCHAIN_PATH ?= $(HOME)/Nedlastinger/gcc-arm-none-eabi-4_7-2013q3/bin/
TERMINAL ?= gnome-terminal -e

FLASH_START_ADDRESS = $(shell $(OBJDUMP) -h $(ELF) -j .text | grep .text | awk '{print $$4}')

ifdef SEGGER_SERIAL
JLINKEXE_OPTION = -SelectEmuBySn $(SEGGER_SERIAL)
JLINKGDBSERVER_OPTION = -select USB=$(SEGGER_SERIAL)
endif

MAKE_BUILD_FOLDER = mkdir -p $(OUTPUT_PATH)

JLINK = -! JLinkExe $(JLINK_OPTIONS) $(JLINKEXE_OPTION)
JLINKGDBSERVER = JLinkGDBServer $(JLINK_OPTIONS) $(JLINKGDBSERVER_OPTION)

SOFTDEVICE_OUTPUT = $(OUTPUT_PATH)$(notdir $(SOFTDEVICE))

clean:
	rm -rf $(OUTPUT_PATH)
	rm -f *.jlink
	rm -f JLink.log
	rm -f .gdbinit

flash: all flash.jlink
	$(JLINK) flash.jlink

flash.jlink: $(OUTPUT_PATH)/bootloader-uicr.bin $(OUTPUT_PATH)/sdk-bootloader-config.bin
	@printf "r\n"                                           >$@
	@printf "loadbin \"$(BIN)\" $(FLASH_START_ADDRESS)\n"  >>$@
ifdef FLASH_BOOTLOADER_UICR
	@# FIXME: The bootloader's address is wrote correctly to uicr, but I always get a "Error: Programming failed @ address 0x10001000 (block verification error)"
	@#        Even "w4 4001e504 1" won't help. Any suggestions?
	@#printf "w4 4001e504 1\n"                                              >>$@
	@printf "loadbin \"$(OUTPUT_PATH)/bootloader-uicr.bin\" 0x10001014\n"  >>$@
endif
ifdef FLASH_SDK_BOOTLOADER_CONFIG
	@printf "loadbin \"$(OUTPUT_PATH)/sdk-bootloader-config.bin\" $(FLASH_SDK_BOOTLOADER_CONFIG_ADDRESS)\n"  >>$@
endif
	@printf "r\n"     >>$@
	@printf "g\n"     >>$@
	@printf "exit\n"  >>$@

$(OUTPUT_PATH)/bootloader-uicr.bin:
	@# printf "\x00\xA0\x03\x00" >$@
	@# For flashing the bootloader's uicr entry, we need the flash address in 32 bit binary little endian format
	@# We first convert the e.g. "0003a000" to "00 a0 03 00", so that xxd can convert that to binary
	@printf "$(shell a="$(FLASH_START_ADDRESS)"; printf "$${a:6:2} $${a:4:2} $${a:2:2} $${a:0:2}")" | xxd -r -p >$@

$(OUTPUT_PATH)/sdk-bootloader-config.bin:
	@# TODO: Set correct values for crc16 & size, see also bootloader_settings_t
	@printf "\x01\x00\x00\x00\x00\x00\x00\x00" >$@

flash-softdevice: erase-all flash-softdevice.jlink
ifndef SOFTDEVICE
	$(error "You need to set the SOFTDEVICE command-line parameter to a path (without spaces) to the softdevice hex-file")
endif

	# Convert from hex to binary. Split original hex in two to avoid huge (>250 MB) binary file with just 0s.
	$(OBJCOPY) -Iihex -Obinary --remove-section .sec3 $(SOFTDEVICE) $(SOFTDEVICE_OUTPUT:.hex=_mainpart.bin)
	$(OBJCOPY) -Iihex -Obinary --remove-section .sec1 --remove-section .sec2 $(SOFTDEVICE) $(SOFTDEVICE_OUTPUT:.hex=_uicr.bin)
	$(JLINK) flash-softdevice.jlink

flash-softdevice.jlink:
	# Write to NVMC to enable write. Write mainpart, write UICR. Assumes device is erased.
	@printf "w4 4001e504 1\n"                                                >$@
	@printf "loadbin \"$(SOFTDEVICE_OUTPUT:.hex=_mainpart.bin)\" 0\n"       >>$@
	@printf "loadbin \"$(SOFTDEVICE_OUTPUT:.hex=_uicr.bin)\" 0x10001000\n"  >>$@
	@printf "r\n"                                                           >>$@
	@printf "g\n"                                                           >>$@
	@printf "exit\n"                                                        >>$@

recover: recover.jlink erase-all.jlink pin-reset.jlink
	$(JLINK) recover.jlink
	$(JLINK) erase-all.jlink
	$(JLINK) pin-reset.jlink

recover.jlink:
	printf "si 0\nt0\nsleep 1\ntck1\nsleep 1\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\nt0\nsleep 2\nt1\nsleep 2\ntck0\nsleep 100\nsi 1\nr\nexit\n" > recover.jlink

pin-reset.jlink:
	printf "w4 40000544 1\nr\nexit\n" > pin-reset.jlink

pin-reset: pin-reset.jlink
	$(JLINK) pin-reset.jlink

reset: reset.jlink
	$(JLINK) reset.jlink

reset.jlink:
	printf "r\ng\nexit\n" > reset.jlink

erase-all: erase-all.jlink
	$(JLINK) erase-all.jlink

erase-all.jlink:
	# Write to NVMC to enable erase, do erase all, wait for completion. reset
	printf "w4 4001e504 2\nw4 4001e50c 1\nsleep 100\nr\nexit\n" > erase-all.jlink

startdebug: debug-gdbinit
	$(TERMINAL) "$(JLINKGDBSERVER) -port $(GDB_PORT_NUMBER)"
	sleep 1
	$(TERMINAL) "$(GDB) $(ELF)"

debug-gdbinit:
	printf "target remote localhost:$(GDB_PORT_NUMBER)\nbreak main\n" > .gdbinit

.PHONY: flash flash-softdevice erase-all startdebug
